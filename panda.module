<?php
// $Id$

require('panda.php');

function panda_theme() {
  return array(
    'panda_uploader' => array('arguments' => array('element' => NULL)),
    'panda_formatter_default' => array('arguments' => array('element' => NULL)),
  );
}

function panda_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#panda":
      $output = '<p>'.  t("This module allows users to upload videos through !panda, the video encoding service", array('!panda' => l("Panda", 'http://pandastream.com'))) .'</p>';
      break;
  }
  return $output;
}

function panda_perm() {
  return array('upload videos');
}

function panda_menu() {
  $items = array();

  $items['admin/settings/panda'] = array(
    'title' => 'Panda',
    'description' => 'Specify your Panda account details here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panda_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

function panda_admin() {
  $form = array();

  $form['panda_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Key'),
    '#default_value' => variable_get('panda_access_key', NULL),
    '#description' => t("Your Panda access key, as per your account details."),
    '#required' => TRUE,
  );

  $form['panda_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#default_value' => variable_get('panda_secret_key', NULL),
    '#description' => t("Your Panda secret key, as per your account details."),
    '#required' => TRUE,
  );

  $form['panda_cloud_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Cloud ID'),
    '#default_value' => variable_get('panda_cloud_id', NULL),
    '#description' => t("The ID of the Panda cloud you want to use."),
    '#required' => TRUE,
  );

  $form['panda_s3_bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 Bucket'),
    '#default_value' => variable_get('panda_s3_bucket', NULL),
    '#description' => t("The name of the S3 bucket where Panda has been configured to store your videos."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function panda_field_info() {
  return array(
    'panda_video' => array(
      'label' => t('Video file'),
      'description' => t('Upload a video directly to Panda for immediate encoding'),
    ),
  );
}

function panda_widget_info() {
  return array(
    'panda_uploader' => array(
      'label' => t('JS uploader'),
      'field types' => array('panda_video'),
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

function panda_field_settings($op, $field) {
  $delegate = 'panda_field_settings_' . str_replace(' ', '_', $op);
  if (function_exists($delegate)) {
    return $delegate($field);
  }
}

function panda_field_settings_database_columns($field) {
  return array(
    'video_id' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE),
    'encoding_id' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE),
    'width' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
    'height' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
    'extname' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE),
  );
}

function panda_field($op, &$node, $field, &$items, $teaser, $page) {
  $delegate = 'panda_field_' . $op;
  if (function_exists($delegate)) {
    return $delegate($node, $field, $items, $teaser, $page);
  }
}

function panda_field_presave(&$node, $field, &$items, $teaser, $page) {
  foreach ($items as &$item) {
    $encodings = json_decode(@_panda()->get("/videos/{$item['video_id']}/encodings.json"));
    $encoding = array_shift($encodings);
    $item['encoding_id'] = $encoding->id;
    $item['width'] = $encoding->width;
    $item['height'] = $encoding->height;
    $item['extname'] = $encoding->extname;
  }
}

function panda_field_formatter_info() {
  return array(
    'default' => array('label' => t('Default'), 'field types' => array('panda_video')),
  );
}

function panda_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

function panda_elements() {
  $elements = array();
  $elements['panda_uploader'] = array(
    '#input' => TRUE,
    '#columns' => array('video_id', 'encoding_id', 'width', 'height', 'extname'),
    '#process' => array('panda_widget_process'),
  );
  return $elements;
}

function panda_widget_process($element, $edit, $form_state, $complete_form) {
  $field_key = 'video_id';
  drupal_add_js(drupal_get_path('module', 'panda') .'/panda_uploader/jquery.panda-uploader-0.5.cat.js');
  $element[$field_key] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : '',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#prefix' => _panda_widget_additional_markup(),
    '#suffix' => _panda_widget_js($element['#id'] . '-video-id'),
  );

  return $element;
}

function panda_content_is_empty($item, $field) {
  return ! $item['video_id'];
}


function theme_panda_uploader($element) {
  drupal_add_css(drupal_get_path('module', 'panda') .'/panda_uploader/panda-uploader.css');
  return theme('form_element', $element, $element['#children']);
}

function theme_panda_formatter_default($element) {
  return 'THIS IS DA STUFF!!!';
}

function _panda_widget_additional_markup() {
  return <<<EOF
    <span id="upload_button"></span> 
    <input type="text" id="upload_filename" disabled="true" class="panda_upload_filename" /> 
    <div id="upload_progress" class="panda_upload_progress"></div>
EOF;
}

function _panda_widget_js($element_id) {
  $signed_params = json_encode(@_panda()->signed_params('POST', '/videos.json'));
  return <<<EOF
    <script type="text/javascript"> 
      $('#$element_id').pandaUploader($signed_params, {
      upload_button_id: 'upload_button',
      upload_filename_id: 'upload_filename',
      upload_progress_id: 'upload_progress',
      api_url: 'http://api.pandastream.com/v2',
      uploader_dir: '/panda_example_php/panda_uploader',
      });
    </script>
EOF;
}

function _panda() {
  static $panda;
  if ($panda) {
    return $panda;
  }
  $cloud_id = variable_get('panda_cloud_id', NULL);
  $access_key = variable_get('panda_access_key', NULL);
  $secret_key = variable_get('panda_secret_key', NULL);
  $panda = new Panda(array('cloud_id' => $cloud_id, 'access_key' => $access_key, 'secret_key' => $secret_key));
  return $panda;
}
